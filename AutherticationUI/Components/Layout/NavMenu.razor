@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStore

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">AuthenticationUI</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
            </NavLink>
        </div>

        @if (IsAuthenticated)
        {
            <div class="nav-item px-3">
                <button class="nav-link btn btn-danger text-white" @onclick="Logout">Logout</button>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="register">
                    <span class="bi bi-person-plus-fill" aria-hidden="true"></span> Register
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool IsAuthenticated = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            var token = await localStore.GetItemAsStringAsync("authToken");
            IsAuthenticated = !string.IsNullOrEmpty(token);
            if(!IsAuthenticated){
                Navigation.NavigateTo("/login");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task Logout()
    {
        await localStore.RemoveItemAsync("authToken");
        IsAuthenticated = false;
        StateHasChanged(); // UI yangilash
        Navigation.NavigateTo("/");
    }
}
